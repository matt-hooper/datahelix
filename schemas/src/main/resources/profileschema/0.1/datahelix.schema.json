{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://scottlogic.com/datahelix.json",
  "title": "The Scott Logic DataHelix Profile Schema",
  "type": "object",
  "additionalProperties": false,
  "required": ["schemaVersion", "fields", "rules"],
  "properties": {
    "additionalProperties": false,
    "schemaVersion": {
      "$ref": "#/definitions/schemaVersion"
    },
    "description": {
      "title": "A description of what data the profile is modelling",
      "type": "string"
    },
    "fields": {
      "title": "Defines the fields that data will be produced for. field names must begin with an alphabetic character.",
      "type": "array",
      "minItems": 1,
      "uniqueItems": true,
      "additionalItems": false,
      "items": {
        "$ref": "#/definitions/fieldName"
      }
    },
    "rules": {
      "title": "The Rules defining the data to be output",
      "type": "array",
      "additionalItems": false,
      "items": {
        "title": "A set of Rule objects.",
        "type": "object",
        "additionalProperties": false,
        "required": ["constraints"],
        "properties": {
          "rule": {
            "title": "A collection of constraints. Test case generation revolves around rules, in that the generator will output a separate dataset for each rule, wherein each row violates the rule in a different way.",
            "type": "string"
          },
          "constraints": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/constraint"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "schemaVersion": {
      "title": "The version of the DataHelix profile schema",
      "type": "string",
      "default": "0.1",
      "pattern": "^[0-9]+[.][0-9]+$"
    },
    "dataType": {
      "oneOf": [
        {
          "$ref": "#/definitions/datetime"
        },
        {
          "$ref": "#/definitions/string"
        },
        {
          "$ref": "#/definitions/numeric"
        }
      ]
    },
    "datetime": {
      "type": "object",
      "additionalProperties": false,
      "required": ["date"],
      "default": {
        "date": "2000-01-01T09:00:00.000"
      },
      "properties": {
        "additionalProperties": false,
        "date": {
          "title": "an ISO 8610 compatible string denoting a date and time",
          "type": "string",
          "default": "2000-01-01T09:00:00.000",
          "pattern": "^(?!0000)[0-9]{4}-([0][0-9]|[1][0-2])-([0-2][0-9]|3[01])T([0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9][.][0-9]{3}Z?$"
        }
      }
    },
    "numeric": {
      "type": "number",
      "minimum": -1e20,
      "maximum": 1e20,
      "default": 0
    },
    "integer": {
      "$ref": "#/definitions/numeric",
      "multipleOf": 1
    },
    "string": {
      "type": "string",
      "maxLength": 1000,
      "default": "string"
    },
    "fieldName": {
      "title": "The name of a field to generate data for",
      "type": "object",
      "additionalProperties": false,
      "required": ["name"],
      "default": {
        "name": "fieldName"
      },
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "constraint": {
      "oneOf": [
        {
          "$ref": "#/definitions/dataConstraint"
        },
        {
          "$ref": "#/definitions/nullConstraint"
        },
        {
          "$ref": "#/definitions/inSetConstraint"
        },
        {
          "$ref": "#/definitions/notConstraint"
        },
        {
          "$ref": "#/definitions/anyOfConstraint"
        },
        {
          "$ref": "#/definitions/allOfConstraint"
        },
        {
          "$ref": "#/definitions/ifThenConstraint"
        },
        {
          "$ref": "#/definitions/ifThenElseConstraint"
        }
      ]
    },
    "dataConstraint": {
      "type": "object",
      "required": ["field", "is", "value"],
      "additionalProperties": false,
      "properties": {
        "field": {
          "type": "string"
        },
        "is": {
          "enum": [
            "ofType",
            "equalTo",
            "aValid",
            "formattedAs",
            "matchingRegex",
            "containingRegex",
            "ofLength",
            "longerThan",
            "shorterThan",
            "greaterThan",
            "lessThan",
            "greaterThanOrEqualTo",
            "lessThanOrEqualTo",
            "granularTo",
            "after",
            "afterOrAt",
            "before",
            "beforeOrAt"
          ]
        },
        "value": {}
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "is": {
                "enum": ["after", "afterOrAt", "before", "beforeOrAt"]
              }
            }
          },
          "then": {
            "properties": {
              "value": {
                "$ref": "#/definitions/datetime"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "is": {
                "const": "equalTo"
              }
            }
          },
          "then": {
            "properties": {
              "value": {
                "$ref": "#/definitions/dataType"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "is": {
                "const": "ofType"
              }
            }
          },
          "then": {
            "properties": {
              "value": {
                "enum": ["decimal", "integer", "string", "datetime"]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "is": {
                "const": "formattedAs"
              }
            }
          },
          "then": {
            "properties": {
              "value": {
                "pattern": "^%.+$",
                "default": "%"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "is": {
                "enum": ["matchingRegex", "containingRegex"]
              }
            }
          },
          "then": {
            "properties": {
              "value": {
                "type": "string",
                "default": ".*"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "is": {
                "const": "shorterThan"
              }
            }
          },
          "then": {
            "properties": {
              "value": {
                "$ref": "#/definitions/integer",
                "minimum": 1,
                "maximum": 1001
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "is": {
                "const": "ofLength"
              }
            }
          },
          "then": {
            "properties": {
              "value": {
                "$ref": "#/definitions/integer",
                "minimum": 0,
                "maximum": 1000
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "is": {
                "const": "longerThan"
              }
            }
          },
          "then": {
            "properties": {
              "value": {
                "$ref": "#/definitions/integer",
                "minimum": -1,
                "maximum": 999
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "is": {
                "const": "granularTo"
              }
            }
          },
          "then": {
            "properties": {
              "value": {
                "enum": [
                  1,
                  1e-1,
                  1e-2,
                  1e-3,
                  1e-4,
                  1e-5,
                  1e-6,
                  1e-7,
                  1e-8,
                  1e-9,
                  1e-10,
                  1e-11,
                  1e-12,
                  1e-13,
                  1e-14,
                  1e-15,
                  1e-16,
                  1e-17,
                  1e-18,
                  1e-19,
                  1e-20,
                  "millis",
                  "seconds",
                  "minutes",
                  "hours",
                  "days",
                  "months",
                  "years"
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "is": {
                "enum": [
                  "greaterThan",
                  "lessThan",
                  "greaterThanOrEqualTo",
                  "lessThanOrEqualTo"
                ]
              }
            }
          },
          "then": {
            "properties": {
              "value": {
                "$ref": "#/definitions/numeric"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "is": {
                "const": "aValid"
              }
            }
          },
          "then": {
            "properties": {
              "value": {
                "const": "ISIN",
                "default": "ISIN"
              }
            }
          }
        }
      ]
    },
    "notConstraint": {
      "type": "object",
      "additionalProperties": false,
      "required": ["not"],
      "properties": {
        "not": {
          "$ref": "#/definitions/constraint"
        }
      }
    },
    "anyOfConstraint": {
      "type": "object",
      "additionalProperties": false,
      "required": ["anyOf"],
      "properties": {
        "anyOf": {
          "type": "array",
          "minItems": 2,
          "items": {
            "$ref": "#/definitions/constraint"
          }
        }
      }
    },
    "allOfConstraint": {
      "type": "object",
      "additionalProperties": false,
      "required": ["allOf"],
      "properties": {
        "allOf": {
          "type": "array",
          "minItems": 2,
          "items": {
            "$ref": "#/definitions/constraint"
          }
        }
      }
    },
    "ifThenConstraint": {
      "type": "object",
      "required": ["if", "then"],
      "additionalProperties": false,
      "properties": {
        "if": {
          "$ref": "#/definitions/constraint"
        },
        "then": {
          "$ref": "#/definitions/constraint"
        }
      }
    },
    "ifThenElseConstraint": {
      "type": "object",
      "required": ["if", "then", "else"],
      "additionalProperties": false,
      "properties": {
        "if": {
          "$ref": "#/definitions/constraint"
        },
        "then": {
          "$ref": "#/definitions/constraint"
        },
        "else": {
          "$ref": "#/definitions/constraint"
        }
      }
    },
    "nullConstraint": {
      "type": "object",
      "required": ["field", "is"],
      "additionalProperties": false,
      "properties": {
        "field": {
          "type": "string"
        },
        "is": {
          "const": "null"
        }
      }
    },
    "inSetConstraint": {
      "type": "object",
      "required": ["field", "is", "values"],
      "additionalProperties": false,
      "properties": {
        "field": {
          "type": "string"
        },
        "is": {
          "const": "inSet"
        },
        "values": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/datetime"
              },
              {
                "$ref": "#/definitions/numeric"
              },
              {
                "$ref": "#/definitions/string"
              }
            ]
          }
        }
      }
    }
  }
}
